#+title: Work-timers

* Usage

** Advantage: history

#+begin_comment
Include annotated image (numbered elements, like a instructional diagram) that shows example data for ~work-timer-history~.
#+end_comment

* Mimicking ~org-pomodoro~

#+begin_comment
Include an example set up for the 50-minute variant
#+end_comment

* Mimicking ~org-pomodoro-third-time~

#+begin_comment
Include example set ups for different fractional break times?
#+end_comment

* Advanced configuration

** Internals

#+begin_comment
Include Mermaid diagram showcasing the interaction between the layers of the program. One end should be the USER, another the MODE LINE TIMER. In between should be the layers of (at the time of writing this): HISTORY, DURATION FUNCTIONS
#+end_comment

** Relevant variables and functions

** Example configuration

#+begin_comment
Include my own configuration?
#+end_comment

** Suggestions

#+begin_comment
Mention that I users can take the built-in break and work duration functions andâ€¦
+ Advise (e.g. override) them.
+ Create their own functions that wrap an existing function
+ Create their own functions from scratch
#+end_comment

* Inspirations and related packages

+ [[https://github.com/telotortium/org-pomodoro-third-time][Org-pomodoro-third-time: Adapt org-pomodoro to implement the Third Time system]]
  (mention differences tk)
+ Org-timer: built-in org-mode package.
+ Tmr: Protesilaos's timer package.

#  LocalWords:  Tmr Protesilaos's

* Comparison to ~org-pomodoro~

** Differences

+ ~work-timer~ supports arbitrarily complex ways to set the duration of timers. For instance, built-in is support determining timer duration based on the history of ran timers and how much time the previous was overran by.
+ ~work-timer~ supports seamless user configuration by means of ~work-timer-work-duration-function~ and ~work-timer-break-duration-function~.
  - ~work-timer~ also has more built-in support for useful ways to determine break and work durations beyond Pomodoro-style timers, e.g., ~work-timer-fractional-*-duration~.
+ ~work-timer~ offers ~work-timer-modify~ to modify the parameters (e.g. running time, duration) of the currently running timer.
+ ~work-timer~ supports arbitrary timer types (for more flexibility than just work-break cycles).
+ ~work-timer~ supports manual entry of timer duration when desired.
+ ~work-timer~ supports pausing of timers.
+ ~work-timer~ generally has cleaner code logic and more points of entry for users, making it more extensible, I argue. For example, ~work-timer-history~ and the several variables that hold information for the current timer are accessible for whatever the user needs, whether it be defining their own ~work-timer-work-duration-function~ or adding to ~work-timer-modify~.

** Similarities

+ Overrun timers.
+ Mode line indictor.
+ Pomodoro-style timers.

* Tips and tricks

** Saving current timer across Emacs sessions with ~savehist~

Sometimes you have a running timer and Emacs crashes. Or perhaps you'd like to save the ~work-timer-history~ for one reason or another. ~work-timer~ simply saves the current work timer information in variables, so you can save these variables across Emacs sessions via ~savehist~. ~work-timer~ is configured such that starting a new timer (via ~work-timer-start~ or ~work-timer-start-or-finish~) will use the already set variable values, effectively resuming the timer.
#+begin_src emacs-lisp
  ;; Save timer variables to resume timer across Emacs sessions
  (dolist (var '(work-timer-start-time
                 work-timer-duration
                 work-timer-type
                 work-timer-pauses
                 work-timer-history))
    (add-to-list 'savehist-additional-variables var))
#+end_src
If you do not want to save the timer history, feel free to remove ~work-timer-history~. (It might be useful to know that ~work-timer-end~ allows from wiping the entire history or just the current timer.)
